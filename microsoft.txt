class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        low,high=0,len(nums)-1
        while low<=high:
            mid=(low+high)//2
            if nums[mid]==target:
                return mid
            if nums[mid]<target:
                low=mid+1
            else:
                high=mid-1
        return low
--------------------------------------------------------------------------------------------------------------------------------------------------------------

lst = [15,0,105]
l = len(lst)
i = 0
m = -1
while i < 1 - 1:
    j = i + 1
    while j < 1:
	s = set(str(lst[i]))
	t = set(str(lst[j]))
	if not len(s.intersection(t)):
	   tm,p = lst[i]+lst[j]
	   m = max(m, tmp)
   i+=1
print(m)

-------------------------------------------------------------------------------------------------------------------------------------------------------------- 
from 
lst = [8,3,5,4,5]
x = 8
y = 9
if x > y:
     tmp = x
     x = y
     y = x
count = 0
lst.sort()
l = len(lst)
i = 1
while i <= 1:
    for j in sorted(list(combinations(lst, i)), key=lambda x :num(x), reverse=True):
	print(sorted(list(combinations(lst, i)), key=lambda x :num(x), reverse=True)

	print(j)
	if (num(j)